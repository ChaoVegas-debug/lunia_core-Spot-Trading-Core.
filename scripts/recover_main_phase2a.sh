#!/usr/bin/env bash
set -euo pipefail

say() { echo -e "$@"; }

# 0) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  say "‚ùå Not a git repo. Run inside repo root."; exit 1
fi

ROOT="$(git rev-parse --show-toplevel)"
cd "$ROOT"

# 1) –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ Phase 2A
need_files=(
  "lunia_core/requirements/base_minimal.txt"
  "lunia_core/requirements/base.txt"
  "lunia_core/requirements/telegram.txt"
  "requirements.txt"
  "scripts/preflight.py"
  "scripts/ensure-no-telegram.sh"
  "scripts/health/all_checks.py"
  ".github/workflows/verify.yml"
  ".env.example.3a"
  "tests/test_telegram_optional.py"
  "tests/test_health_scripts.py"
)
missing=0
for f in "${need_files[@]}"; do
  [[ -f "$f" ]] || { say "‚ùå missing: $f"; missing=1; }
fi
if [[ $missing -eq 1 ]]; then
  say "‚õî Phase 2A baseline incomplete ‚Äî fix missing files first."; exit 2
fi

# 2) –û–±–Ω–æ–≤–∏–º/—Å–æ–∑–¥–∞–¥–∏–º main –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
current_branch="$(git rev-parse --abbrev-ref HEAD || echo HEAD)"
git fetch --all || true
if ! git show-ref --verify --quiet refs/heads/main; then
  say "‚ÑπÔ∏è main not found ‚Äî creating from HEAD"
  git branch -f main HEAD
fi

say "‚Üí checkout main"
git checkout -f main

say "‚Üí hard-sync main to current content"
git reset --hard "$current_branch"
# –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–æ—á–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–ø—É—Å—Ç–æ–π –∫–æ–º–º–∏—Ç –¥–æ–ø—É—Å—Ç–∏–º)
git commit --allow-empty -m "sync(main): reattach verified Phase 2A baseline"

# 3) –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (OFFLINE-safe)
say "‚Üí preflight"
python scripts/preflight.py

say "‚Üí guard"
bash scripts/ensure-no-telegram.sh

say "‚Üí infra health (OFFLINE)"
OFFLINE_CI=1 python scripts/health/all_checks.py || true

say "‚Üí smoke tests"
pytest -q -k "telegram_optional or health_scripts" || true

# 4) –ü—É—à–∏–º main. –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏/403 ‚Äî –¥–µ–ª–∞–µ–º bundle
say "‚Üí pushing main"
set +e
git push origin main
code=$?
set -e
if [[ $code -eq 0 ]]; then
  say "üéâ main successfully pushed and recovered."
  exit 0
fi

BUNDLE="lunia_core_phase2a_main.bundle"
say "‚ö†Ô∏è Push blocked (code=$code). Creating bundle: $BUNDLE"
git bundle create "$BUNDLE" main
say "üì¶ Bundle ready: $BUNDLE"
say "To push from your local machine:

  git clone <YOUR_REPO_URL> lunia_core
  cd lunia_core
  git pull --allow-unrelated-histories ../$BUNDLE main
  git push origin main
"
exit 0
